/* To Do:
Visual:
	Shore textures
	End-Path textures
	More characters
≈	Boat
	Attacking animations
	Particles (Ducks! Fishes!)
≈	Flowers?!
	3DS Virtual Console-esque "View at original size with cool graphic"
	Cutscenes
	Title Screen (with instructions!)
	Redo player sidehair

Mechanical:
≈	Implement characterStep();
≈	Enemy support
≈	$$$ / Drops
	Bed - Healing
	Particle "touch"
	Butterfly-based luck (More butterflies = better chance of drops? Or more drops? Or better stats?)
	Touch screen UI (title.addEventListener('touchstart', initTouchInterface, false);)
	Local spritesheet support
	Save/Load
	In-game manual (as an overlay)
	Secondary Inventory screen (story-specific)? A/S to switch btwn?
≈	Q-menu W-Fullscreen?
	Better teleport() code?
*/

var timeoutID;
var next = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame;

var overworld = document.getElementById("overworld");
var HUD = document.getElementById("HUD");
var darken = document.getElementById("darken");
var text = document.getElementById("text");
var inventory = document.getElementById("inventory");
var items = document.getElementById("items");
var map = document.getElementById("map");
var menu = document.getElementById("menu");
var video = document.getElementById("video");
var context = overworld.getContext("2d");

var k = {
	16:"Sft", 37:"Lf", 38:"Up", 39:"Rt", 40:"Dn", 88:"X", 90:"Z",
	Sft:false, Lf:false, Up:false, Rt:false, Dn:false, X:false, Z:false,
    dn: function(e)	{
		if (e.keyCode === 83 && map.dataset.state === "out" && menu.dataset.state === "out" && video.dataset.state === "out") {
			if (inventory.dataset.state === "out") inventory.dataset.state = "in";
			else inventory.dataset.state = "out";
		}
		else if (e.keyCode === 32 && menu.dataset.state === "out" && video.dataset.state === "out") {
			if (map.dataset.state === "out") map.dataset.state = "in";
			else map.dataset.state = "out";
		}
		else if (e.keyCode === 65) {
			if (menu.dataset.state === "out") menu.dataset.state = "in";
			else menu.dataset.state = "out";
		}
		else if (e.keyCode === 70) {
			if (document.getElementById("gameWindow").fullscreenElement || document.getElementById("gameWindow").mozFullScreenElement || document.getElementById("gameWindow").webkitFullscreenElement) {
				if (document.cancelFullscreen) {
					document.cancelFullscreen();
				} else if (document.mozCancelFullScreen) {
					document.mozCancelFullScreen();
				} else if (document.webkitCancelFullscreen) {
					document.webkitCancelFullscreen();
				}
			}
			else {
				if (document.body.requestFullscreen) {
					document.body.requestFullscreen();
				} else if (document.body.mozRequestFullScreen) {
					document.body.mozRequestFullScreen();
				} else if (document.body.webkitRequestFullscreen) {
					document.body.webkitRequestFullscreen();
				}
			}
		}
		else if (k[e.keyCode]) k[k[e.keyCode]] = true;
	},
    up: function(e) {
		if (k[e.keyCode]) k[k[e.keyCode]] = false;
	}
}

var pause = false;

var title = {
	"boomerang": "Boomerang",
	"glitch": "Glitch"
}

var walkMap = new Array();

var tileMap = [
	[
		[0x20,0x20,0x20,0x16,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x17,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x14,0x12,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x14,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x18,0x01,
		 0x20,0x20,0x20,0x14,0x12,0x12,0x18,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x14,0x18,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01],
		[0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x30,0x30,0x30,0x30,0x37,0x30,0x30,0x39,0x30,0x30,0x30,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01],
		[0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x16,0x1A,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x16,0x1A,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x20,0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x20,0x16,0x1A,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01],
		[0x20,0x20,0x20,0x20,0x20,0x16,0x1A,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x16,0x1A,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x16,0x13,0x1A,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x16,0x13,0x1A,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x16,0x13,0x13,0x13,0x13,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20]
	],
	[
		[0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x14,0x18,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x14,0x18,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x14,0x12,0x18,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x20,0x20,0x20,0x14,0x12,0x18,0x01,0x01,0x01,0x01,0x01,0x35,0x30,0x30,0x30,
		 0x12,0x12,0x12,0x12,0x18,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x38,0x30,0x30,0x32,0x01,0x01,0x01],
		[0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x35,0x37,0x34,0x01,0x01,0x01,0x01,0x01,
		 0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3A,0x01,0x38,0x30,0x30,0x30,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x33,0x39,0x32,0x01,0x01,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x00,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x33,0x30,0x30,0x30,0x3A,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01],
		[0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x33,0x30,0x30,0x34,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01],
		[0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x35,0x30,0x30,0x30,0x3A,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x31,0x01,0x01,0x01,
		 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x31,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x13,0x1A,0x01,0x01,0x01,0x01,0x01,0x01,0x3E,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		 0x20,0x16,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x13,0x13,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
		 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20]
	],
	[
		[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
	],
	[
		[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
	]
]

var structureMap = [
	[
		[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x20,0x20,0x20,0x31,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x0A,0x00,0x00,0x32,0x21,0x21,0x21,0x33,0x00,0x00,0x00,0x08,
		 0x00,0x00,0x00,0x08,0x05,0x06,0x09,0x22,0x24,0x25,0x24,0x26,0x08,0x06,0x06,0x06,
		 0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
		[0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x34,0x20,0x35,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x36,0x37,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x39,0x21,0x3A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x22,0x24,0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x30,0x20,0x20,0x20,0x31,0x00,
		 0x00,0x00,0x00,0x00,0x07,0x01,0x02,0x01,0x02,0x00,0x32,0x21,0x21,0x21,0x33,0x00,
		 0x00,0x00,0x00,0x00,0x07,0x03,0x04,0x03,0x04,0x00,0x22,0x24,0x23,0x24,0x26,0x00,
		 0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x08,0x05,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06],
		[0x00,0x00,0x00,0x00,0x0B,0x01,0x02,0x01,0x02,0x01,0x02,0x01,0x02,0x01,0x02,0x01,
		 0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x03,0x04,0x03,0x04,0x03,0x04,0x03,0x04,0x03,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0x03,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x01,0x02,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0x03],
		[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x00,0x00,0x01,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
	],
	[
		[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x01,0x02,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x00,0x03,0x04,0x00,0x03,0x04,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x01,0x02,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x00,0x01,0x02,
		 0x00,0x00,0x00,0x00,0x01,0x02,0x30,0x20,0x20,0x20,0x31,0x00,0x00,0x00,0x03,0x04,
		 0x0A,0x00,0x00,0x00,0x03,0x04,0x32,0x21,0x21,0x21,0x33,0x00,0x00,0x00,0x0A,0x00,
		 0x05,0x06,0x06,0x06,0x06,0x09,0x22,0x24,0x23,0x25,0x26,0x08,0x06,0x06,0x05,0x09,
		 0x05,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,
		 0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00],
		[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x34,0x20,0x35,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x37,0x38,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x39,0x21,0x3A,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x23,0x26,
		 0x00,0x00,0x00,0x00,0x30,0x20,0x31,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,
		 0x00,0x00,0x00,0x00,0x32,0x21,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,
		 0x00,0x00,0x00,0x00,0x22,0x27,0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,
		 0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x09,0x00,0x08,0x06,0x06,0x06,0x05,0x09],
		[0x02,0x01,0x02,0x01,0x02,0x01,0x02,0x01,0x02,0x00,0x01,0x02,0x01,0x02,0x01,0x02,
		 0x04,0x03,0x04,0x03,0x04,0x03,0x04,0x03,0x04,0x00,0x03,0x04,0x03,0x04,0x03,0x04,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,
		 0x02,0x00,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,
		 0x04,0x00,0x01,0x02,0x03,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,
		 0x00,0x00,0x03,0x04,0x00,0x01,0x02,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0x01,0x02,
		 0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x00,0x03,0x04,0x00,0x00,0x00,0x03,0x04,
		 0x02,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0x01,0x02,
		 0x04,0x00,0x00,0x03,0x04,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x00,0x00,0x03,0x04],
		[0x02,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,
		 0x04,0x00,0x03,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,
		 0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x20,0x20,0x20,0x20,0x20,0x31,
		 0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x21,0x21,0x21,0x21,0x21,0x33,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x24,0x24,0x23,0x24,0x24,0x26,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
	],
	[
		[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
	],
	[
		[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x05,0x06,0x06,0x06,0x06,0x06,0x06,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x05,0x06,0x06,0x09,0x00,0x08,0x06,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
	]
]

/* Character Attributes:
	sprite = Character sprite name;
	anim = Current animation frame;
	timer = Animation timer;
	delay = Time between frames;
	gCoords = Global location;
	coords = Local coordinates;
	dir = Sprite direction;
	action = Action function;
*/

var characterArray = [
	{
		sprite: "player",
		anim: 0,
		timer: 0,
		delay: 12,
		gCoords: [1,1],
		coords: [5.5,8.5],
		dir: "down",
		action: function() {
			useItem(document.getElementById("xSlot").dataset.item);
		}
	},
	{
		sprite: "kid",
		anim: 0,
		timer: 0,
		delay: 0,
		gCoords: [0,1],
		coords: [14,1],
		dir: "down",
		action: function() {
			text.innerHTML = "<blockquote><b>Kid:</b> You and me, we're pretty similar.</blockquote><p>(The player now uses the exact same mechanics as any other character in the game.)</p>";
			text.dataset.state = "in";
		}
	},
	{
		sprite: "old man",
		anim: 0,
		timer: 0,
		delay: 0,
		gCoords: [1,0],
		coords: [9.5,8.5],
		dir: "down",
		action: function () {
			text.innerHTML = "<blockquote><b>Old Man:</b> Princess Taevä will be starting the midsummer ceremonies soon…</blockquote>";
			afterText = function () {
				text.innerHTML = "<blockquote><b>Old Man:</b> You'd better hurry or you'll miss it!</blockquote>";
				text.dataset.state = "in";
				afterText = function () {pause = false;}
			}
			text.dataset.state = "in";
		}
	},
	{
		sprite: "captain",
		anim: 0,
		timer: 0,
		delay: 0,
		gCoords: [1,3],
		coords: [6.35,4.85],
		dir: "down",
		action: function() {
			text.innerHTML = "<blockquote><b>Captain:</b> <i>*sigh*</i> I have such a pretty ship…</blockquote>"
			text.dataset.state = "in";
		}
	}
]

var localCharacterList = new Array;

function afterText() {
	pause = false;
}

function generateWalkMap(m,n) {
	var tmap = new Array();
	var t;
	var s;
	var c;
	for (var i=0; i<10; i++) {
		for (var j=0; j<16; j++) {
			t=tileMap[m][n][i*16+j];
			s=structureMap[m][n][i*16+j];
			if (t === 0x12 || t === 0x14 || t === 0x1C || t === 0x1D || t === 0x1E || t === 0x1F || t === 0x20 || t === 0x21 || t === 0x23 || t === 0x24 || t === 0x25 || (s>0x02 && s<0x11 && s !== 0x0C) || (s>0x20 && s<0x30 && s !== 0x27) || (s>0x31 && s !== 0x34 && s!== 0x35)) {
				tmap[tmap.length] = 0;
				tmap[tmap.length] = 0;
			}
			else if (t === 0x10 || t === 0x16 || t === 0x18) {
				tmap[tmap.length] = 0;
				tmap[tmap.length] = 1;
			}
			else if (t === 0x11 || t === 0x17 || t === 0x19) {
				tmap[tmap.length] = 1;
				tmap[tmap.length] = 0;
			}
			else {
				tmap[tmap.length] = 1;
				tmap[tmap.length] = 1;
			}
		}
		for (var j=0; j<16; j++) {
			t=tileMap[m][n][i*16+j];
			s=structureMap[m][n][i*16+j];
			if (t === 0x13 || t === 0x16 || t === 0x17 || t === 0x1C || t === 0x1D || t === 0x1E || t === 0x1F || t === 0x20 || t === 0x21 || t === 0x23 || t === 0x24 || t === 0x25 || (s>0x00 && s<0x11) || (Math.floor(s/0x10) === 0x2 && s !== 0x27) || (s>0x31 && s !== 0x34 && s!== 0x35)) {
				tmap[tmap.length] = 0;
				tmap[tmap.length] = 0;
			}
			else if (t === 0x10 || t === 0x14 || t === 0x1A || s === 0x31 || s === 0x35) {
				tmap[tmap.length] = 0;
				tmap[tmap.length] = 1;
			}
			else if (t === 0x11 || t === 0x15 || t === 0x1B || s === 0x30 || s === 0x34) {
				tmap[tmap.length] = 1;
				tmap[tmap.length] = 0;
			}
			else {
				tmap[tmap.length] = 1;
				tmap[tmap.length] = 1;
			}
		}
	}
	return tmap;
}

function insideNPC(c,g) {
	var r = null;
	for (var i=0; i<localCharacterList[g[0]][g[1]].length; i++) {
		if(c[0] <= characterArray[localCharacterList[g[0]][g[1]][i]].coords[0]+.375 && c[0] >= characterArray[localCharacterList[g[0]][g[1]][i]].coords[0]-.375 && c[1] <= characterArray[localCharacterList[g[0]][g[1]][i]].coords[1]+.4375 && c[1] >= characterArray[localCharacterList[g[0]][g[1]][i]].coords[1]-.4375) r = i;
	}
	if (r === null) r = 0;
	else r = localCharacterList[g[0]][g[1]][r];
	return r;
}

function walkable(c,g) {
	var r = 1;
	for (var m=-1; m<2; m++) {
		for (var n=-1; n<2; n++) {
			if(insideNPC([c[0]+m*.375,c[1]+n*.4375],g) || !walkMap[g[0]][g[1]][Math.floor(2*(c[0]+m*.375)) + Math.floor(2*(c[1]+n*.4375))*32]) r = 0;
		}
	}
	return r;
}

/* Particle attributes:
	type = Type of particle;
	anim = Animation;
	timer = Animation timer;
	dir = Direction of sprite and/or motion (string or vector)
	coords = Particle coordinates;
	sprite = Sprite index;
	touch = Function to execute on collision w/ player
*/

var particle;

function generateParticles() {
	particle = new Array();
	var pCoords;
	for (var i=0; i<640; i++) {
		pCoords = [(i%32)/2,Math.floor(i/32)/2];
		if ((Math.random()<.0625 && structureMap[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][Math.floor(pCoords[0])+Math.floor(pCoords[1])*16]===0x0D) || (tileMap[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][Math.floor(pCoords[0])+Math.floor(pCoords[1])*16] && Math.random()<.00390625 && walkable(pCoords, characterArray[0].gCoords))) {
			particle[particle.length] = {
				type: "butterfly",
				anim: Math.floor(Math.random()*2),
				timer: Math.floor(Math.random()*8),
				coords: pCoords,
				dir: [Math.random()*2-1,Math.random()*2-1],
				sprite: "butterfly",
				touch: function() {
					return null;
				}
			}
		}
	}
}

function particleStep(n) {
	switch (particle[n].type) {
		case "boomerang":
			particle[n].coords[0] += particle[n].dir[0]/16;
			particle[n].coords[1] += particle[n].dir[1]/16;
			particle[n].timer++;
			if (particle[n].timer >= 5) {
				particle[n].timer = 0;
				particle[n].anim++;
				particle[n].anim %= 2;
			}
			if (particle[n].coords[0] > 16.5 || particle[n].coords[0] < -0.5 || particle[n].coords[1] > 10.5 || particle[n].coords[1] < -0.5) particle.splice(n, 1);
			break;

		case "butterfly":
			if (walkable([particle[n].coords[0]+particle[n].dir[0]/16, particle[n].coords[1]+particle[n].dir[1]/16], characterArray[0].gCoords)) {
				particle[n].coords[0] += particle[n].dir[0]/16;
				particle[n].coords[1] += particle[n].dir[1]/16;
			}
			particle[n].timer++;
			if (particle[n].timer >= 8) {
				particle[n].dir = [Math.random()*2-1, Math.random()*2-1];
				particle[n].timer = 0;
				particle[n].anim++;
				particle[n].anim %= 2;
			}
			break;
	}
}

function checkParticle(n) {
	var r = false;
	for (var i = 0; i < particle.length; i++) if (particle[i].type === n) r = i+1;
	return r;
}

/* Enemy Attributes:
	sprite = Enemy sprite;
	health = Enemy health (current);
	anim = Animation frame;
	timer = Animation timer;
	dir = Sprite direction;
	coords = Local coordinates;
	Prototype:
		step = Step function;
		touch = Touch function;
*/

Enemy = {};

Enemy["daoōs"] = function(c) {
	this.sprite = "daoōs";
	this.health = 3;
	this.anim = 0;
	this.timer = 0;
	this.dir = "down";
	this.coords = c;
}
Enemy["daoōs"].prototype = {
	step: function() {
	},
	touch: function() {
		adjustPlayerHealth(-1);
	}
}

function focus() {
	var f;
	if (characterArray[0].dir === "down") f = [characterArray[0].coords[0], characterArray[0].coords[1]+1];
	if (characterArray[0].dir === "left") f = [characterArray[0].coords[0]-.75, characterArray[0].coords[1]];
	if (characterArray[0].dir === "up") f = [characterArray[0].coords[0], characterArray[0].coords[1]-1];
	if (characterArray[0].dir === "right") f = [characterArray[0].coords[0]+.75, characterArray[0].coords[1]];
	return f;
}

function receive(n) {
	document.getElementById(n).setAttribute("data-item",n);
	document.getElementById(n).setAttribute("title",title[n]);
	text.innerHTML += "<p>You got the <strong>"+title[n]+"</strong>!</p><div style='width:5vw;height:5vw;margin:auto;border:thick black outset;' data-item="+n+"></div>";
	text.dataset.state = "in";
}

function equip(e,n) {
	var i = document.getElementById(n);
	var x = document.getElementById("xSlot");
	var z = document.getElementById("zSlot");
	if (i.dataset.item) {
		if (e.shiftKey) {
			if (i.dataset.equipped === "z") z.removeAttribute("data-item");
			if (x.dataset.item) document.getElementById(x.dataset.item).removeAttribute("data-equipped");
			i.dataset.equipped = "x";
			x.dataset.item = n;
			x.setAttribute("title", i.getAttribute("title"));
		}
		else {
			if (i.dataset.equipped === "x") x.removeAttribute("data-item");
			if (z.dataset.item) document.getElementById(z.dataset.item).removeAttribute("data-equipped");
			i.dataset.equipped = "z";
			z.dataset.item = n;
			z.setAttribute("title", i.getAttribute("title"));
		}
	}
}

function useItem (m) {
	var n = particle.length;
	switch (m) {
		case "boomerang":
			if (!checkParticle("boomerang")) {
				particle[n] = {
					type: "boomerang",
					anim: 0,
					timer: 0,
					coords: [characterArray[0].coords[0],characterArray[0].coords[1]],
					sprite: "boomerang"
				}
				if (characterArray[0].dir === "down") particle[n].dir = [0,1];
				else if (characterArray[0].dir === "left") particle[n].dir = [-1,0];
				else if (characterArray[0].dir === "right") particle[n].dir = [1,0];
				else if (characterArray[0].dir === "up") particle[n].dir = [0,-1];
				particle[n].coords[0] += particle[n].dir[0]*.75;
				particle[n].coords[1] += particle[n].dir[1];
			}
			break;

		case "glitch":
			color=alien;
			break;
	}
}

var hudTimer = 0;

function adjustPlayerHealth(n) {
	var health = document.getElementById("health");
	var m = Number(health.getAttribute("min"));
	var x = Number(health.getAttribute("max"));
	n += Number(health.getAttribute("value"));
	if (n <= m) gameOver();
	else if (n > x) health.setAttribute("value", x);
	else health.setAttribute("value", n);
	hudTimer = -60;
}

function setGlobalPosition(n) {
	characterArray[0].gCoords = n;
	localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]] = new Array();
	for (var i=0; i<characterArray.length; i++) {
		if (characterArray[i].gCoords[0] === characterArray[0].gCoords[0] && characterArray[i].gCoords[1] === characterArray[0].gCoords[1]) localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]].length] = i;	}
	generateParticles();
}

function teleport() {
	if (characterArray[0].gCoords[0] === 1) {
		if (characterArray[0].gCoords[1] === 1 && Math.floor(characterArray[0].coords[0]) === 5 && Math.floor(characterArray[0].coords[1]) === 7) {
			setGlobalPosition([3,0]);
		}
	}
	else if (characterArray[0].gCoords[0] === 3) {
		if (characterArray[0].gCoords[1] === 0 && Math.floor(characterArray[0].coords[0]) === 5 && Math.floor(characterArray[0].coords[1]) === 8) {
			setGlobalPosition([1,1]);
		}
	}
}

function gameOver() {
	window.clearTimeout(timeoutID);
	text.innerHTML = "Game Over";
	text.dataset.state = "in";
}

function logic() {
	if (inventory.dataset.state === "out" && map.dataset.state === "out" && menu.dataset.state === "out" && video.dataset.state === "out" && text.dataset.state === "out" && !pause) {
		var dx = 0;
	    var dy = 0;
	    if (k.Up && k.Lf && k.Dn && k.Rt) dy = dx = 0;
	    else if (k.Lf && k.Dn && k.Rt) {
		dy = 1;
		dx = 0;
		characterArray[0].dir = "down";
	    }
	    else if (k.Up && k.Dn && k.Rt) {
		dy = 0;
		dx = 1;
		characterArray[0].dir = "right";
	    }
	    else if (k.Up && k.Lf && k.Rt) {
		dy = -1;
		dx = 0;
		characterArray[0].dir = "up";
	    }
	    else if (k.Up && k.Lf && k.Dn) {
		dy = 0;
		dx = -1;
		characterArray[0].dir = "left";
	    }
	    else if (k.Up && k.Lf) {
		dy = -1/Math.SQRT2;
		dx = -1/Math.SQRT2;
		characterArray[0].dir = "up";
	    }
	    else if (k.Up && k.Rt) {
		dy = -1/Math.SQRT2;
		dx = 1/Math.SQRT2;
		characterArray[0].dir = "up";
	    }
	    else if (k.Dn && k.Lf) {
		dy = 1/Math.SQRT2;
		dx = -1/Math.SQRT2;
		characterArray[0].dir = "down";
	    }
	    else if (k.Dn && k.Rt) {
		dy = 1/Math.SQRT2;
		dx = 1/Math.SQRT2;
		characterArray[0].dir = "down";
	    }
	    else if (k.Up && k.Dn) dy = dx = 0;
	    else if (k.Lf && k.Rt) dy = dx = 0;
	    else if (k.Up) {
	        dy = -1;
	        characterArray[0].dir = "up";
	    }
	    else if (k.Dn) {
	        dy = 1;
	        characterArray[0].dir = "down";
	    }
	    else if (k.Lf) {
	        dx = -1;
	        characterArray[0].dir = "left";
	    }
	    else if (k.Rt) {
	        dx = 1;
	        characterArray[0].dir = "right";
		}
		if (characterArray[0].coords[0] - .375 + dx/16 <= 0 && walkable([15.5, characterArray[0].coords[1]], [characterArray[0].gCoords[0] - 1, characterArray[0].gCoords[1]])) {
		characterArray[0].coords[0] = 15.5;
		setGlobalPosition([characterArray[0].gCoords[0] - 1, characterArray[0].gCoords[1]]);
		}
		else if (characterArray[0].coords[0] + .375 + dx/16 >= 16 && walkable([0.5, characterArray[0].coords[1]], [characterArray[0].gCoords[0] + 1, characterArray[0].gCoords[1]])) {
		characterArray[0].coords[0] = 0.5;
		setGlobalPosition([characterArray[0].gCoords[0] + 1, characterArray[0].gCoords[1]]);
		}
		else if (characterArray[0].coords[1] - .4375 + dy/16 <= 0 && walkable([characterArray[0].coords[0], 9.5], [characterArray[0].gCoords[0], characterArray[0].gCoords[1] - 1])) {
		characterArray[0].coords[1] = 9.5;
		setGlobalPosition([characterArray[0].gCoords[0], characterArray[0].gCoords[1] - 1]);
		}
		else if (characterArray[0].coords[1] + .4375 + dy/16 >= 10 && walkable([characterArray[0].coords[0], 0.5], [characterArray[0].gCoords[0], characterArray[0].gCoords[1] + 1])) {
		characterArray[0].coords[1] = 0.5;
		setGlobalPosition([characterArray[0].gCoords[0],characterArray[0].gCoords[1] + 1]);
		}
		else teleport();
		if (walkable([characterArray[0].coords[0]+dx/16, characterArray[0].coords[1]+dy/16], characterArray[0].gCoords)) {
			characterArray[0].coords[0] += dx/16;
			characterArray[0].coords[1] += dy/16;
			if (!dx && !dy) {
				characterArray[0].anim = 0;
				characterArray[0].timer = 0;
			}
			else characterArray[0].timer++;
			if (characterArray[0].timer >= characterArray[0].delay) {
				characterArray[0].anim++;
				characterArray[0].anim %= 2;
				characterArray[0].timer = 0;
			}
		}
		if (k.X) {
			characterArray[insideNPC(focus(),characterArray[0].gCoords)].action();
			k.X = false;
		}
		if (k.Z) {
			useItem(document.getElementById("zSlot").dataset.item);
			k.Z = false;
		}
		for (var i=0; i<particle.length; i++) {
			particleStep(i);
		}
		if (k.Sft || hudTimer) {
			HUD.dataset.state = "in";
			items.dataset.state = "in";
			if (hudTimer) hudTimer++;
		}
		else {
			HUD.dataset.state = "out";
			items.dataset.state = "out";
		}
		darken.dataset.state = "out";
	}
	else {
		darken.dataset.state = "in";
		HUD.dataset.state = "out";
		if (inventory.dataset.state === "in") items.dataset.state = "in";
		else items.dataset.state = "out";
		if (text.dataset.state === "in" && k.Z) {
			text.innerHTML = "";
			text.dataset.state = "out";
			pause = true;
			k.Z = false;
		}
	}
	timeoutID = window.setTimeout(logic,50/3);
}

function render() {
	var spriteLoader = context.createImageData(16,16);
	for (var i=0; i<160; i++) {
		for (var j=0; j<0x100; j++) {
			spriteLoader.data[j*4] = color[tileTexture[tileMap[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]][j]][0];
			spriteLoader.data[j*4+1] = color[tileTexture[tileMap[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]][j]][1];
			spriteLoader.data[j*4+2] = color[tileTexture[tileMap[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]][j]][2];
			spriteLoader.data[j*4+3] = 0xFF;
		}
		context.putImageData(spriteLoader,16*(i%16),16*Math.floor(i/16));
	}
	for (var i=0; i<localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]].length; i++) {
		spriteLoader = context.getImageData(Math.floor(16 * (characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].coords[0] - 1/2)), Math.floor(16 * (characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].coords[1] - 1/2)), 16, 16);
		for (var j=0; j<0x100; j++) {
			if(characterSprite[characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].sprite][characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].dir][characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].anim][j]) {
				spriteLoader.data[j*4] = color[characterSprite[characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].sprite][characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].dir][characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].anim][j]][0];
				spriteLoader.data[j*4 + 1] = color[characterSprite[characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].sprite][characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].dir][characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].anim][j]][1];
				spriteLoader.data[j*4 + 2] = color[characterSprite[characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].sprite][characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].dir][characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].anim][j]][2];
				spriteLoader.data[j*4 + 3] = 0xFF;
			}
		}
		context.putImageData(spriteLoader, Math.floor(16 * (characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].coords[0] - 1/2)), Math.floor(16 * (characterArray[localCharacterList[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]].coords[1] - 1/2)));
	}
	for (var i=0; i<160; i++) {
		if(structureMap[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]) {
			spriteLoader = context.getImageData(16*(i%16),16*Math.floor(i/16),16,16);
			for (var j=0; j<0x100; j++) {
				if(structureTexture[structureMap[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]][j]) {
					spriteLoader.data[j*4] = color[structureTexture[structureMap[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]][j]][0];
					spriteLoader.data[j*4+1] = color[structureTexture[structureMap[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]][j]][1];
					spriteLoader.data[j*4+2] = color[structureTexture[structureMap[characterArray[0].gCoords[0]][characterArray[0].gCoords[1]][i]][j]][2];
					spriteLoader.data[j*4+3] = 0xFF;
				}
			}
		context.putImageData(spriteLoader,16*(i%16),16*Math.floor(i/16));
		}
	}
	for (var i=0; i<particle.length; i++) {
		spriteLoader = context.getImageData(Math.floor(16 * (particle[i].coords[0] - 1/2)), Math.floor(16 * (particle[i].coords[1] - 1/2)),16,16);
		for (var j=0; j<0x100; j++) {
			if (particleSprite[particle[i].sprite][particle[i].anim][j]) {
				spriteLoader.data[j*4] = color[particleSprite[particle[i].sprite][particle[i].anim][j]][0];
				spriteLoader.data[j*4+1] = color[particleSprite[particle[i].sprite][particle[i].anim][j]][1];
				spriteLoader.data[j*4+2] = color[particleSprite[particle[i].sprite][particle[i].anim][j]][2];
				spriteLoader.data[j*4+3] = 0xFF;
			}
		}
		context.putImageData(spriteLoader, Math.floor(16 * (particle[i].coords[0] - .5)), Math.floor(16 * (particle[i].coords[1] - .5)));
	}
	document.getElementById("screenshot").setAttribute("href", overworld.toDataURL("image/png"));
	next(render);
}

function init() {
	for (var m=0; m<tileMap.length; m++) {
		localCharacterList[m] = new Array();
		walkMap[m] = new Array();
		for (var n=0; n<tileMap[m].length; n++) {
			localCharacterList[m][n] = new Array();
			walkMap[m][n] = generateWalkMap(m,n);
			for (var i=0; i<characterArray.length; i++) {
				if (characterArray[i].gCoords[0] === m && characterArray[i].gCoords[1] === n) localCharacterList[m][n][localCharacterList[m][n].length] = i;
			}
		}
	}
	setGlobalPosition([1,1]);
	logic();
	render();
}

init();

window.addEventListener("keydown", k.dn, false);
window.addEventListener("keyup", k.up, false);

text.addEventListener("transitionend", function(){if (text.innerHTML === "") afterText();}, false);
text.addEventListener("webkitTransitionEnd", function(){if (text.innerHTML === "") afterText();}, false);

document.getElementById("boomerang").addEventListener("click", function(e){equip(e,"boomerang");}, false);
document.getElementById("glitch").addEventListener("click",function(e) {equip(e,"glitch");}, false);
